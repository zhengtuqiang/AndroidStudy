buildscript {
    repositories {
        maven {
            url = uri("$rootDir/repo")
        }
        // 添加 JitPack 仓库
        maven { url 'https://jitpack.io' }
        maven {
            url 'https://maven.aliyun.com/repository/public'
        }
        maven {
            url 'https://maven.aliyun.com/repository/google'
        }
        maven {
            url 'https://maven.aliyun.com/repository/central'
        }
        mavenCentral()
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
        google()
    }
    dependencies {
        //https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn
        classpath "com.android.tools.build:gradle:$agp_version"
        classpath Deps.kotlinPlugin
        //protocol buffer插件：https://github.com/google/protobuf-gradle-plugin
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.17'
        //classpath 'com.fastgo:plugin:1.0-test'
//        classpath 'com.performance.optimize:lib_bytecode:1.0.0'
    }
}


allprojects {
    repositories {
        // 添加 JitPack 仓库
        maven { url 'https://jitpack.io' }
        maven {
            url 'https://maven.aliyun.com/repository/public'
        }
        maven {
            url 'https://maven.aliyun.com/repository/google'
        }
        maven {
            url 'https://maven.aliyun.com/repository/central'
        }
        mavenCentral()
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
        google()
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//-------配置完成后，可以通过Task.getTaskGraph()获取Task有向无环图-------
//TaskExecutionGraph graph = gradle.getTaskGraph()
//graph.whenReady {
//    println("whenReady")
//}
//graph.beforeTask {Task task -> println("任务名称：${task.name} beforeTask")}
//graph.afterTask {Task task -> println("任务名称：${task.name} afterTask")}

//1、直接在build.gradle中定义插件
//apply plugin: GreetingPlugin

//class GreetingPlugin implements Plugin<Project> {
//
//    @Override
//    void apply(Project project) {
//        project.task('hello') {
//            doLast {
//                println 'Hello from the GreetingPlugin'
//            }
//        }
//    }
//}

//2、在rootProject/buildSrc/main/groovy中定义插件
//apply plugin: GreetingExtensionPlugin
//
//greeting {
//    message = 'hello'
//    greeter = 'GreetingExtensionPlugin'
//}

//3、定义在单独的moudle中并发布
// apply plugin: 'com.fastgo.plugin'
//ext.greetingFile="$buildDir/hello.txt"




